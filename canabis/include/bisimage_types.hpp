#ifndef BISIMAGE_TYPES_HPP_INCLUDED
#define BISIMAGE_TYPES_HPP_INCLUDED



#include <stdio.h>



/** \brief bis: namespace for multidimensional images
 *
 *  This namespace contains the bisimage class for
 *  creating and processing multidimensional images.
 */
namespace bis {

    
    
/** \brief NO/DO read data enumeration for easily readable code
 */
enum readdata {
    NO_READ_DATA,
    DO_READ_DATA
};



/** \brief NO/DO sort data enumeration (used in maxtree)
 */
enum sortdata {
    NO_SORT,
    DO_SORT
};



/** \brief NO/DO use level data in maxtree mask (used in maxtree)
 */
enum uselevel {
    NO_LEVEL,
    DO_LEVEL
};



/** \brief NO/DO check for file existence enumeration for easily readable code
 */
enum check_existence {
    NO_CHECK_EXISTENCE,
    DO_CHECK_EXISTENCE
};


/** \brief NO/DO set byte order enumeration for easily readable code
 */
enum set_byteorder {
    NO_SET_BYTEORDER,
    DO_SET_BYTEORDER
};



/** \brief struct for dimensionality reduction: inner, at, outer dimensions
 */
typedef struct reducer {
    size_t inr { 1 };
    size_t atr { 1 };
    size_t out { 1 };
} reducer;



#define bisDebug 1

#define bisexception_err(etype,disp_flag)                                 \
    if (bisDebug >= 1) {                                                  \
        char tmp[1136];                                                   \
        va_list ap;                                                       \
        va_start(ap, format);                                             \
        vsprintf(message, format, ap);                                    \
        va_end(ap);                                                       \
        sprintf(tmp, "==> %s \n\nGeneral : %s\n\n", message, etype);      \
        fputs(tmp, stderr);                                               \
    }
    // use fputs, see http://stackoverflow.com/questions/4419293

    struct bisException {
        char message[1024]; //!< Error message
        bisException() {
            message[0] = '\0';
        }
        bisException(const char* format, ...) {
            bisexception_err("This error message was generated by bisException.", true);
        }
    };

    struct bisExceptionIO : bisException {
        bisExceptionIO(const char* format, ...) {
            bisexception_err("This error message was generated by bisExceptionIO\nindicating problems with file/disk access.", true);
        }
    };



/**@brief
 * routine for printing an indexed array of any type - pretty cool
 * author: Larry Evans
 */
template< typename T>
std::ostream& operator<< ( std::ostream &sout, std::vector<T> const &vec ) {
    
      sout << "{ ";      
      for ( unsigned i = 0; i < vec.size(); ++i ) {
          if ( 0 < i ) sout << ", ";
          sout << vec[i];
      }
      sout << " }";
      return sout;
      
}



}; // namespace

#endif // BISIMAGE_MATHS_HPP_INCLUDED
