# -*- CMakeLists.txt generated by CodeLite IDE. Do not edit by hand -*-

cmake_minimum_required(VERSION 3.0)


#{{{{ User Code 01
# Place your code here
#}}}}

enable_language(CXX C ASM)
# Project name
project(probis)



#{{{{ User Code 02
# Place your code here
#}}}}

# This setting is useful for providing JSON file used by CodeLite for code completion
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

set(CONFIGURATION_NAME "Debug")

set(CL_WORKSPACE_DIRECTORY ..)
# Set default locations
set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/${CL_WORKSPACE_DIRECTORY}/cmake-build-${CONFIGURATION_NAME}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})

# Projects


# Top project
# Define some variables
set(PROJECT_probis_PATH "${CMAKE_CURRENT_LIST_DIR}")
set(WORKSPACE_PATH "${CMAKE_CURRENT_LIST_DIR}/..")



#{{{{ User Code 1
# Place your code here
#}}}}

include_directories(
    .
    ..
    ${WORKSPACE_PATH}/json/include
    ${WORKSPACE_PATH}/canabis/include
    ${WORKSPACE_PATH}/nifti/include
    ${WORKSPACE_PATH}/z
    ${WORKSPACE_PATH}/znz/include
    .

)


# Compiler options
add_definitions(-std=gnu++2a)
add_definitions(-Wno-narrowing)
add_definitions()
add_definitions(-g)
add_definitions(-O0)
add_definitions(-Wall)

# Linker options
set(LINK_OPTIONS -lzip)
set(LINK_OPTIONS ${LINK_OPTIONS} -lz)
set(LINK_OPTIONS ${LINK_OPTIONS} -lznz)
set(LINK_OPTIONS ${LINK_OPTIONS} -lnifti)
set(LINK_OPTIONS ${LINK_OPTIONS} -lcanabis)
set(LINK_OPTIONS ${LINK_OPTIONS} -lofstd)
set(LINK_OPTIONS ${LINK_OPTIONS} -loflog)
set(LINK_OPTIONS ${LINK_OPTIONS} -ldcmdata)
set(LINK_OPTIONS ${LINK_OPTIONS} -ldcmimgle)
set(LINK_OPTIONS ${LINK_OPTIONS} -ltbb)
set(LINK_OPTIONS ${LINK_OPTIONS} )


if(WIN32)
    # Resource options
endif(WIN32)

# Library path
link_directories(
    .
    ..
    ${WORKSPACE_PATH}/cmake-build-${CONFIGURATION_NAME}/lib
)

# Define the CXX sources
set ( CXX_SRCS
    ${CMAKE_CURRENT_LIST_DIR}/src/probis.cpp
)

set_source_files_properties(
    ${CXX_SRCS} PROPERTIES COMPILE_FLAGS 
    " -std=gnu++2a -Wno-narrowing -g -O0 -Wall")

if(WIN32)
    enable_language(RC)
    set(CMAKE_RC_COMPILE_OBJECT
        "<CMAKE_RC_COMPILER> ${RC_OPTIONS} -O coff -i <SOURCE> -o <OBJECT>")
endif(WIN32)



#{{{{ User Code 2
# Place your code here
#}}}}

add_executable(probis ${RC_SRCS} ${CXX_SRCS} ${C_SRCS} ${ASM_SRCS})
target_link_libraries(probis ${LINK_OPTIONS})



#{{{{ User Code 3
# Place your code here
#}}}}

